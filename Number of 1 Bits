/*

Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).
For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.

*/
方法1：不断将n右移一位，然后计数输出1的个数。此种方法较慢，对于0x1ffffff的判定需要循环32次才能计算出结果
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
      int count = 0;
      while(n!=0){
          if((n&1)!=0)
            count++;
          n = n>>>1;    
      } 
      return count;
    }
}

方法2：
n = 0x110100  n-1 = 0x110011   n&(n - 1) = 0x110000 
n = 0x110000  n-1 = 0x101111   n&(n - 1) = 0x100000 
n = 0x100000  n-1 = 0x011111   n&(n - 1) = 0x0 
看到这里已经得到了一种新的解法，n中本来有3个1，按照此种思路只需要循环3此即可求出最终结果，比第一种暴力枚举的解法要少很多次。

public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
      int count = 0;
      while(0 != n)
      {
          n = n&(n - 1);
          ++count;
      }
      return count;
    }
    
}

